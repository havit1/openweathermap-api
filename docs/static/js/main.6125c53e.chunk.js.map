{"version":3,"sources":["utils/ApiRequest.js","components/like/like.jsx","components/CityCard/CityCard.jsx","components/Search/Search.jsx","components/UsersCityWeather/UsersCityWeather.jsx","components/DetailedInfo/DetailedInfoBody.jsx","components/DetailedInfo/DetailedInfo.jsx","components/PageContent/PageContent.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ApiRequest","url","options","this","onSuccess","onError","appid","APPID","xhr","XMLHttpRequest","open","setRequestHeader","send","onreadystatechange","readyState","status","JSON","parse","response","Like","props","classes","onMainPage","cityId","onClick","handleLike","style","cursor","width","height","className","aria-hidden","CityCard","cityInfo","id","changeButtonColor","showComponent","name","sys","country","Math","round","main","temp","humidity","Search","state","searched","onSearchChange","e","setState","target","value","console","log","onSearch","onHandleSearch","preventDefault","search","length","citiesList","find","city","closeDetailedInfo","getSearchedWeatherInfo","searchedCity","create","get","list","type","onChange","Component","UsersCityWeather","navigator","geolocation","getCurrentPosition","pos","getWeather","coords","latitude","longitude","err","warn","code","message","enableHighAccuracy","timeout","maximumAge","getUserWeather","DetailedInfoBody","class","data","photo","scope","map","day","dt_txt","slice","replace","temp_max","temp_min","src","urls","small","alt","DetailedInfo","image","getDetailedInfo","getPhoto","results","floor","random","error","Error","idToSearch","PageContent","showPage","incomeCityId","_cities","clickedCity","index","indexOf","undefined","splice","push","localStorage","setItem","stringify","getWeatherInfo","ids","join","_onButtonClick","onMainBtnClick","getItem","baseCitiesList","getCitiesFromLS","cities","isGeolocationEnabled","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6125c53e.chunk.js","sourcesContent":["export class ApiRequest {\r\n  static create(url, options = {}) {\r\n    return new ApiRequest(url, options);\r\n  }\r\n\r\n  constructor(url, options) {\r\n    this.url = url;\r\n    this.options = options;\r\n  }\r\n\r\n  get(onSuccess, onError) {\r\n    const appid = this.options.APPID;\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open(\"GET\", this.url);\r\n    if (appid) {\r\n      xhr.setRequestHeader(\"APPID\", `${appid}`);\r\n    }\r\n    xhr.send();\r\n\r\n    xhr.onreadystatechange = () => {\r\n      if (xhr.readyState === 4) {\r\n        if (xhr.status === 200) {\r\n          onSuccess(JSON.parse(xhr.response));\r\n        } else {\r\n          onError(xhr);\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./like.scss\";\r\n\r\nconst Like = props => {\r\n  let classes = \"button\";\r\n  if (props.onMainPage(props.cityId)) classes += \"-green\";\r\n\r\n  return (\r\n    <button\r\n      onClick={() => props.handleLike(props.cityId)}\r\n      style={{ cursor: \"pointer\", width: \"10px\", height: \"10px\" }}\r\n      className={classes}\r\n      aria-hidden=\"true\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Like;\r\n","import React from \"react\";\r\nimport \"./CityCard.scss\";\r\nimport Like from \"../like/like\";\r\n\r\nfunction CityCard(props) {\r\n  {\r\n    return (\r\n      <div>\r\n        <div className=\"city-card\">\r\n          <Like\r\n            cityId={props.cityInfo.id}\r\n            onMainPage={props.changeButtonColor}\r\n            handleLike={props.handleLike}\r\n          ></Like>\r\n          <div onClick={() => props.showComponent(props.cityInfo.id)}>\r\n            <h2>City: {props.cityInfo.name}</h2>\r\n            <p>Country: {props.cityInfo.sys.country}</p>\r\n            <h3>Temperature: {Math.round(props.cityInfo.main.temp)}°C</h3>\r\n            <p>Humidity: {props.cityInfo.main.humidity}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CityCard;\r\n","import React, { Component } from \"react\";\r\nimport citiesList from \"../../utils/city.list.json\";\r\nimport { ApiRequest } from \"../../utils/ApiRequest\";\r\nimport \"./Search.scss\";\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    searched: \"\"\r\n  };\r\n\r\n  onSearchChange = e => {\r\n    this.setState({ searched: e.target.value });\r\n    console.log(this.state.searched);\r\n    if (e.target.value === \"\") {\r\n      this.props.onSearch([]);\r\n    }\r\n  };\r\n\r\n  onHandleSearch = e => {\r\n    e.preventDefault();\r\n\r\n    const search =\r\n      this.state.searched.length > 0\r\n        ? citiesList.find(city => city.name === this.state.searched)\r\n        : null;\r\n    this.props.closeDetailedInfo();\r\n    this.getSearchedWeatherInfo(search);\r\n  };\r\n\r\n  getSearchedWeatherInfo = searchedCity => {\r\n    if (typeof searchedCity !== \"object\") {\r\n      this.setState({ search: \"This city doesn't exist\" });\r\n      this.props.onSearch(\"This city doesn't exist\");\r\n      return;\r\n    } else if (searchedCity === null) return null;\r\n    {\r\n      ApiRequest.create(\r\n        `https://api.openweathermap.org/data/2.5/group?id=${searchedCity.id}&units=metric&APPID=97ea200bf11177ab3c207304b3be2608`\r\n      ).get(\r\n        response => {\r\n          console.log(\"call for search\", response);\r\n          this.props.onSearch(response.list[0]);\r\n        },\r\n        e => {\r\n          console.log(e);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"search-bar\">\r\n        <input\r\n          className=\"search-bar__input\"\r\n          type=\"text\"\r\n          onChange={this.onSearchChange}\r\n        />\r\n        <button className=\"search-bar__btn\" onClick={this.onHandleSearch}>\r\n          Search\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\r\nimport { ApiRequest } from \"../../utils/ApiRequest\";\r\nimport \"./UserCityWeather.scss\";\r\n\r\nclass UsersCityWeather extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      cityInfo: []\r\n    };\r\n  }\r\n\r\n  getUserWeather() {\r\n    navigator.geolocation.getCurrentPosition(\r\n      pos => {\r\n        this.getWeather(pos.coords.latitude, pos.coords.longitude);\r\n      },\r\n      err => console.warn(`ERROR(${err.code}): ${err.message}`),\r\n      { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }\r\n    );\r\n  }\r\n\r\n  getWeather(latitude, longitude) {\r\n    ApiRequest.create(\r\n      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&APPID=97ea200bf11177ab3c207304b3be2608`\r\n    ).get(\r\n      response => {\r\n        console.log(\"calling for user's city\", response);\r\n        this.setState({ cityInfo: response });\r\n      },\r\n      e => {\r\n        console.log(e);\r\n      }\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getUserWeather();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"user-info\">\r\n        {this.state.cityInfo.length === 0 ? null : (\r\n          <div>\r\n            <h2>City: {this.state.cityInfo.name}</h2>\r\n            <p>Country: {this.state.cityInfo.sys.country}</p>\r\n            <h3>Temperature: {Math.round(this.state.cityInfo.main.temp)}°C</h3>\r\n            <p>Humidity: {this.state.cityInfo.main.humidity}</p>\r\n            <button\r\n              className=\"user-info__button\"\r\n              onClick={() => this.props.showComponent(this.state.cityInfo.id)}\r\n            >\r\n              Details\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UsersCityWeather;\r\n","import React from \"react\";\r\nimport \"../styles/bootstrap-4.3.1-dist/css/bootstrap.css\";\r\nimport \"./DetailedInfo.scss\";\r\n\r\nconst DetailedInfoBody = props => {\r\n  return (\r\n    <div class=\"detailed-info\">\r\n      {props.data.length === 0 || props.photo.length === 0 ? null : (\r\n        <div>\r\n          <h2>{props.data.city.name}</h2>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\" className=\"bg-primary\">\r\n                  Day\r\n                </th>\r\n                <th scope=\"col\" className=\"bg-primary\">\r\n                  Temp\r\n                </th>\r\n                <th scope=\"col\" className=\"bg-primary\">\r\n                  Max temp\r\n                </th>\r\n                <th scope=\"col\" className=\"bg-primary\">\r\n                  Min temp\r\n                </th>\r\n                <th scope=\"col\" className=\"bg-primary\">\r\n                  Huminity\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {props.data.list.map(day => (\r\n                <tr className=\"table-info\">\r\n                  <th scope=\"row\">\r\n                    {day.dt_txt\r\n                      .slice(5, 16)\r\n                      .replace(/(\\w+)\\.(\\w+)/, \"$1\", \"$2\")\r\n                      .replace(\"-\", \".\")}\r\n                  </th>\r\n                  <th>{Math.round(day.main.temp)}°C</th>\r\n                  <th>{Math.round(day.main.temp_max)}°C</th>\r\n                  <th>{Math.round(day.main.temp_min)}°C</th>\r\n                  <th>{day.main.humidity}</th>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <img src={props.photo.urls.small} alt=\"\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailedInfoBody;\r\n","import React, { Component } from \"react\";\r\nimport { ApiRequest } from \"../../utils/ApiRequest\";\r\nimport DetailedInfoBody from \"./DetailedInfoBody\";\r\n\r\nclass DetailedInfo extends Component {\r\n  state = {\r\n    data: [],\r\n    showComponent: false,\r\n    image: []\r\n  };\r\n\r\n  getDetailedInfo = id => {\r\n    ApiRequest.create(\r\n      `https://api.openweathermap.org/data/2.5/forecast?id=${id}&units=metric&APPID=97ea200bf11177ab3c207304b3be2608`\r\n    ).get(\r\n      response => {\r\n        console.log(\"calling for city\", response);\r\n        this.setState({ data: response });\r\n      },\r\n      e => {\r\n        console.log(e);\r\n      }\r\n    );\r\n  };\r\n\r\n  getPhoto = name => {\r\n    ApiRequest.create(\r\n      `https://api.unsplash.com/search/photos?page=1-10&query=${name},town&client_id=1daed900b99463debb658164eea9672dc7f95f9939b97a745a479ddbe5592be8`\r\n    ).get(\r\n      response => {\r\n        if (response) {\r\n          console.log(response);\r\n          this.setState({\r\n            image: response.results[Math.floor(Math.random() * (10 - 0) + 0)]\r\n          });\r\n        } else {\r\n          console.error(\"response is empty\", response);\r\n        }\r\n      },\r\n      e => {\r\n        throw new Error(e);\r\n      }\r\n    );\r\n  };\r\n\r\n  componentWillMount() {\r\n    let idToSearch = this.props.city;\r\n    this.getDetailedInfo(idToSearch);\r\n    this.getPhoto(this.state.data.name);\r\n  }\r\n\r\n  render() {\r\n    return <DetailedInfoBody photo={this.state.image} data={this.state.data} />;\r\n  }\r\n}\r\n\r\nexport default DetailedInfo;\r\n","import React, { Component } from \"react\";\r\nimport { ApiRequest } from \"../../utils/ApiRequest\";\r\nimport CityCard from \"../CityCard/CityCard\";\r\nimport Search from \"../Search/Search\";\r\nimport UsersCityWeather from \"../UsersCityWeather/UsersCityWeather\";\r\nimport \"./PageContent.scss\";\r\nimport DetailedInfo from \"../DetailedInfo/DetailedInfo\";\r\n\r\nclass PageContent extends Component {\r\n  state = {\r\n    data: [],\r\n    searchedCity: [],\r\n    showPage: \"\"\r\n  };\r\n\r\n  getCitiesFromLS() {\r\n    if (!localStorage.getItem(\"Cities\")) {\r\n      return [\r\n        { id: \"7532072\" },\r\n        { id: \"7533415\" },\r\n        { id: \"6695624\" },\r\n        { id: \"7530738\" },\r\n        { id: \"773357\" },\r\n        { id: \"7530729\" },\r\n        { id: \"7531906\" },\r\n        { id: \"3081046\" },\r\n        { id: \"7530984\" },\r\n        { id: \"7531734\" }\r\n      ];\r\n    } else return JSON.parse(localStorage.getItem(\"Cities\"));\r\n  }\r\n\r\n  handleLike = incomeCityId => {\r\n    let _cities = [...this.state.data];\r\n    console.log(this.state.data.find(city => city.id === incomeCityId));\r\n    const clickedCity = this.state.data.find(city => city.id === incomeCityId);\r\n    const index = _cities.indexOf(clickedCity);\r\n    clickedCity !== undefined\r\n      ? _cities.splice(index, 1)\r\n      : _cities.push(this.state.searchedCity);\r\n    this.setState({ data: _cities });\r\n    localStorage.setItem(\"Cities\", JSON.stringify(_cities));\r\n  };\r\n\r\n  changeButtonColor = incomeCityId => {\r\n    const clickedCity = this.state.data.find(city => city.id === incomeCityId);\r\n    return clickedCity !== undefined ? true : false;\r\n  };\r\n\r\n  getWeatherInfo = citiesList => {\r\n    if (!citiesList) return \"no cities\";\r\n\r\n    let ids = citiesList.map(city => city.id);\r\n    ids = ids.join(\",\");\r\n\r\n    ApiRequest.create(\r\n      `https://api.openweathermap.org/data/2.5/group?id=${ids}&units=metric&APPID=97ea200bf11177ab3c207304b3be2608`\r\n    ).get(\r\n      response => {\r\n        console.log(\"calling for cities\", response);\r\n        this.setState({ data: response.list });\r\n      },\r\n      e => {\r\n        console.log(e);\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    const baseCitiesList = this.getCitiesFromLS();\r\n    this.setState({ cities: baseCitiesList });\r\n    this.getWeatherInfo(baseCitiesList);\r\n  }\r\n\r\n  onSearch = searchedCity => {\r\n    this.setState({ searchedCity });\r\n  };\r\n\r\n  _onButtonClick = id => {\r\n    const showComponent = !this.state.showComponent;\r\n    this.setState({\r\n      showComponent\r\n    });\r\n    this.setState({ showPage: id });\r\n  };\r\n\r\n  closeDetailedInfo = () => {\r\n    this.setState({ showComponent: false }, this.setState({ showPage: \"\" }));\r\n  };\r\n\r\n  onMainBtnClick = () => {\r\n    this.closeDetailedInfo();\r\n    this.setState({ searchedCity: [] });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <nav className=\"top-nav\">\r\n          <button\r\n            className=\"top-nav__home-button\"\r\n            onClick={this.onMainBtnClick}\r\n          >\r\n            Main page\r\n          </button>\r\n          <div className=\"top-nav__search-bar\">\r\n            <Search\r\n              closeDetailedInfo={this.closeDetailedInfo}\r\n              onSearch={this.onSearch}\r\n            ></Search>\r\n          </div>\r\n        </nav>\r\n\r\n        {!this.state.showComponent ? (\r\n          <div className=\"main-content-wrapper\">\r\n            {this.props.isGeolocationEnabled ? null : (\r\n              <div>\r\n                <UsersCityWeather\r\n                  showComponent={this._onButtonClick}\r\n                ></UsersCityWeather>\r\n              </div>\r\n            )}\r\n            <div className=\"main-content\">\r\n              {typeof this.state.searchedCity !== \"string\" ? (\r\n                this.state.searchedCity.length !== 0 ? (\r\n                  <CityCard\r\n                    changeButtonColor={this.changeButtonColor}\r\n                    key={this.state.searchedCity.id}\r\n                    cityInfo={this.state.searchedCity}\r\n                    handleLike={this.handleLike}\r\n                    showComponent={this._onButtonClick}\r\n                  ></CityCard>\r\n                ) : this.state.data.length !== 0 ? (\r\n                  this.state.data.map(city => (\r\n                    <CityCard\r\n                      changeButtonColor={this.changeButtonColor}\r\n                      key={city.id}\r\n                      cityInfo={city}\r\n                      handleLike={this.handleLike}\r\n                      showComponent={this._onButtonClick}\r\n                    ></CityCard>\r\n                  ))\r\n                ) : (\r\n                  <div>\r\n                    <h1>No Cities</h1>\r\n                  </div>\r\n                )\r\n              ) : (\r\n                <h1>{this.state.searchedCity}</h1>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <button\r\n              className=\"detailed-info__button\"\r\n              onClick={this.closeDetailedInfo}\r\n            >\r\n              Close detailed info\r\n            </button>\r\n            <DetailedInfo city={this.state.showPage}></DetailedInfo>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PageContent;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport PageContent from \"./components/PageContent/PageContent\";\n\nfunction App() {\n  return (\n    <div>\n      <PageContent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}