{"version":3,"sources":["utils/pagination.jsx","components/DetailedInfo/DetailedInfoBody.jsx","components/DetailedInfo/DetailedInfo.jsx","utils/paginate.js"],"names":["Pagination","itemsCount","pageSize","currentPage","onPageChange","pagesCount","Math","ceil","pages","_","range","className","map","page","key","onClick","DetailedInfoBody","data","photo","showComponent","handlePageChange","sortedData","getDayName","info","day","dt","dt_txt","time","slice","replace","round","main","temp","alt","src","weather","icon","humidity","wind","speed","length","id","urls","small","DetailedInfo","getDetailedInfo","http","get","getPhoto","name","setState","dateString","split","join","Date","getDay","getWeatherForEachDay","weatherListArray","weatherForNextDays","weatherListTest","i","weatherListNextDay","filter","push","splice","indexOf","state","image","idToSearch","this","props","city","detailedInfo","list","results","paginatedData","items","pageNumber","startIndex","take","value","paginate","Component"],"mappings":"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","file":"static/js/5.a3e3e334.chunk.js","sourcesContent":["import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nconst Pagination = ({ itemsCount, pageSize, currentPage, onPageChange }) => {\r\n  const pagesCount = Math.ceil(itemsCount / pageSize);\r\n\r\n  if (pagesCount === 1) return null;\r\n  const pages = _.range(1, pagesCount + 1);\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination\">\r\n        {pages.map(page => (\r\n          <li\r\n            key={page}\r\n            className={page === currentPage ? \"page-item active\" : \"page-item\"}\r\n            onClick={() => onPageChange(page)}\r\n          >\r\n            <a className=\"page-link\">{page}</a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport \"./DetailedInfo.scss\";\r\nimport Pagination from \"../../utils/pagination\";\r\n\r\nconst DetailedInfoBody = ({\r\n  data,\r\n  photo,\r\n  showComponent,\r\n  handlePageChange,\r\n  currentPage,\r\n  sortedData,\r\n  getDayName\r\n}) => {\r\n  return (\r\n    <div>\r\n      {showComponent === true ? (\r\n        <div className=\"detailed-info\">\r\n          {data.info.map(day => (\r\n            <div key={day[0].dt} className=\"detailed-info__body\">\r\n              <h2 className=\"detailed-info__day-name\">\r\n                {getDayName(day[0].dt_txt)}\r\n              </h2>\r\n              {day.map(time => (\r\n                <div className=\"detailed-info__weather-card\" key={time.dt_txt}>\r\n                  <h2 className=\"detailed-info__weather-card-time\">\r\n                    {time.dt_txt\r\n                      .slice(12, 16)\r\n                      .replace(/(\\w+)\\.(\\w+)/, \"$1\", \"$2\")\r\n                      .replace(\"-\", \".\")}\r\n                  </h2>\r\n                  <div className=\"detailed-info__weather-card-temp-img\">\r\n                    <div>{Math.round(time.main.temp)}Â°C</div>\r\n                    <img\r\n                      alt=\"/\"\r\n                      src={`https://openweathermap.org/img/wn/${time.weather[0].icon}@2x.png`}\r\n                    ></img>\r\n                  </div>\r\n                  <div className=\"detailed-info__weather-card-additional\">\r\n                    <span>Humidity: {time.main.humidity}</span>\r\n                    <span>Wind: {time.wind.speed}</span>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n          <Pagination\r\n            className=\"pagination\"\r\n            itemsCount={sortedData.length}\r\n            pageSize={1}\r\n            currentPage={currentPage}\r\n            onPageChange={handlePageChange}\r\n          />\r\n          <h1 className=\"awesome-photos\">Awesome photos</h1>\r\n          <div className=\"awesome-photos__wrapper\">\r\n            {photo.map(photo => (\r\n              <div key={photo.id} className=\"awesome-photos__wrapper-photo\">\r\n                <img src={photo.urls.small} alt=\"\" />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n          <div className=\"loading\">\r\n            <h1 className=\"loading_text\">Loading...</h1>\r\n          </div>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailedInfoBody;\r\n","import React, { Component } from \"react\";\r\nimport http from \"../../utils/httpService\";\r\nimport DetailedInfoBody from \"./DetailedInfoBody\";\r\nimport { paginate } from \"../../utils/paginate\";\r\n\r\nclass DetailedInfo extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data: {},\r\n      showComponent: false,\r\n      image: {},\r\n      currentPage: 1,\r\n      sortedData: []\r\n    };\r\n  }\r\n\r\n  getDetailedInfo = id => {\r\n    return http.get(\r\n      `https://api.openweathermap.org/data/2.5/forecast?id=${id}&units=metric&APPID=97ea200bf11177ab3c207304b3be2608`\r\n    );\r\n  };\r\n\r\n  getPhoto = name => {\r\n    return http.get(\r\n      `https://api.unsplash.com/search/photos?count=10&query=${name},town&client_id=1daed900b99463debb658164eea9672dc7f95f9939b97a745a479ddbe5592be8`\r\n    );\r\n  };\r\n\r\n  handlePageChange = page => {\r\n    this.setState({ currentPage: page });\r\n  };\r\n\r\n  async componentDidMount() {\r\n    let idToSearch = this.props.city;\r\n    const detailedInfo = await this.getDetailedInfo(idToSearch);\r\n\r\n    this.setState({ data: detailedInfo.data });\r\n\r\n    const sortedData = this.getWeatherForEachDay(detailedInfo.data.list);\r\n\r\n    this.setState({ sortedData });\r\n\r\n    const photo = await this.getPhoto(this.state.data.city.name);\r\n\r\n    this.setState({\r\n      image: photo.data.results,\r\n      showComponent: true\r\n    });\r\n  }\r\n\r\n  getDayName = dateString => {\r\n    dateString.split(\" \").join(\"T\");\r\n    const days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\"\r\n    ];\r\n    const d = new Date(dateString);\r\n    const dayName = days[d.getDay()];\r\n    return dayName;\r\n  };\r\n\r\n  getWeatherForEachDay = weatherListArray => {\r\n    const weatherForNextDays = [];\r\n    const weatherListTest = [...weatherListArray];\r\n\r\n    for (let i = 0; i < weatherListTest.length; i++) {\r\n      const weatherListNextDay = weatherListTest.filter(\r\n        day =>\r\n          new Date(weatherListTest[0].dt_txt.split(\" \").join(\"T\")).getDay() ===\r\n          new Date(day.dt_txt.split(\" \").join(\"T\")).getDay()\r\n      );\r\n\r\n      weatherForNextDays.push(weatherListNextDay);\r\n\r\n      weatherListTest.splice(\r\n        weatherListTest.indexOf(weatherListNextDay[0]),\r\n        weatherListTest.indexOf(\r\n          weatherListNextDay[weatherListNextDay.length - 1]\r\n        ) + 1\r\n      );\r\n    }\r\n    return weatherForNextDays;\r\n  };\r\n\r\n  render() {\r\n    const { image, showComponent, currentPage, sortedData } = this.state;\r\n\r\n    const info = paginate(sortedData, currentPage, 1);\r\n\r\n    const paginatedData = { ...sortedData, info };\r\n\r\n    return (\r\n      <DetailedInfoBody\r\n        getDayName={this.getDayName}\r\n        sortedData={sortedData}\r\n        photo={image}\r\n        data={paginatedData}\r\n        showComponent={showComponent}\r\n        handlePageChange={this.handlePageChange}\r\n        currentPage={currentPage}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default DetailedInfo;\r\n","import _ from \"lodash\";\r\n\r\nexport function paginate(items, pageNumber, pageSize) {\r\n  const startIndex = (pageNumber - 1) * pageSize;\r\n  return _(items)\r\n    .slice(startIndex)\r\n    .take(pageSize)\r\n    .value();\r\n}\r\n"],"sourceRoot":""}