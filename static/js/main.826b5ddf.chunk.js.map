{"version":3,"sources":["utils/httpService.js","components/like/like.jsx","components/CityCard/CityCard.jsx","components/Search/Search.jsx","components/UsersCityWeather/UsersCityWeather.jsx","utils/pagination.jsx","components/DetailedInfo/DetailedInfoBody.jsx","components/DetailedInfo/DetailedInfo.jsx","utils/paginate.js","components/PageContent/PageContentRender.jsx","components/PageContent/PageContent.jsx","App.jsx","serviceWorker.js","index.js"],"names":["axios","interceptors","response","use","error","status","console","log","toast","Promise","reject","get","post","put","delete","Like","props","classes","onMainPage","cityId","onClick","handleLike","style","cursor","width","height","className","aria-hidden","CityCard","cityInfo","id","changeButtonColor","showComponent","name","sys","country","Math","round","main","temp","humidity","Search","state","searched","onSearchChange","e","setState","target","value","onSearch","onHandleSearch","preventDefault","search","length","citiesList","find","city","closeDetailedInfo","getSearchedWeatherInfo","searchedCity","a","undefined","http","searchedCityInfo","data","list","this","type","onChange","Component","UsersCityWeather","navigator","geolocation","getCurrentPosition","pos","getWeather","coords","latitude","longitude","userWeather","err","warn","code","message","enableHighAccuracy","timeout","maximumAge","getUserWeather","Pagination","itemsCount","pageSize","currentPage","onPageChange","pagesCount","ceil","pages","_","range","map","page","key","DetailedInfoBody","photo","handlePageChange","scope","info","day","dt_txt","slice","replace","temp_max","temp_min","src","urls","small","alt","DetailedInfo","image","getDetailedInfo","getPhoto","idToSearch","detailedInfo","results","floor","random","paginatedData","items","pageNumber","startIndex","take","paginate","Fragment","PageContentRender","onMainBtnClick","_onButtonClick","isGeolocationEnabled","showPage","PageContent","incomeCityId","_cities","clickedCity","index","indexOf","splice","push","success","localStorage","setItem","JSON","stringify","getWeatherInfo","ids","join","getItem","parse","baseCitiesList","getCitiesFromLS","weather","cities","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.826b5ddf.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\naxios.interceptors.response.use(null, error => {\r\n  const expectedError =\r\n    error.response &&\r\n    error.response.status >= 400 &&\r\n    error.response.status < 500;\r\n\r\n  if (!expectedError) {\r\n    console.log(\"Logging the error\", error);\r\n    toast.error(\"An unexpected error occurred\");\r\n  }\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport default {\r\n  get: axios.get,\r\n  post: axios.post,\r\n  put: axios.put,\r\n  delete: axios.delete\r\n};\r\n","import React from \"react\";\r\nimport \"./like.scss\";\r\n\r\nconst Like = props => {\r\n  let classes = \"button\";\r\n  if (props.onMainPage(props.cityId)) classes += \"-green\";\r\n\r\n  return (\r\n    <button\r\n      onClick={() => props.handleLike(props.cityId)}\r\n      style={{ cursor: \"pointer\", width: \"10px\", height: \"10px\" }}\r\n      className={classes}\r\n      aria-hidden=\"true\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Like;\r\n","import React from \"react\";\r\nimport \"./CityCard.scss\";\r\nimport Like from \"../like/like\";\r\n\r\nfunction CityCard(props) {\r\n  return (\r\n    <div>\r\n      <div className=\"city-card\">\r\n        <Like\r\n          cityId={props.cityInfo.id}\r\n          onMainPage={props.changeButtonColor}\r\n          handleLike={props.handleLike}\r\n        ></Like>\r\n        <div onClick={() => props.showComponent(props.cityInfo.id)}>\r\n          <h2>City: {props.cityInfo.name}</h2>\r\n          <p>Country: {props.cityInfo.sys.country}</p>\r\n          <h3>Temperature: {Math.round(props.cityInfo.main.temp)}°C</h3>\r\n          <p>Humidity: {props.cityInfo.main.humidity}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CityCard;\r\n","import React, { Component } from \"react\";\r\nimport citiesList from \"../../utils/city.list.json\";\r\nimport http from \"../../utils/httpService\";\r\nimport \"./Search.scss\";\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    searched: \"\"\r\n  };\r\n\r\n  onSearchChange = e => {\r\n    this.setState({ searched: e.target.value });\r\n    if (e.target.value === \"\") {\r\n      this.props.onSearch([]);\r\n    }\r\n  };\r\n\r\n  onHandleSearch = e => {\r\n    e.preventDefault();\r\n\r\n    const search =\r\n      this.state.searched.length > 0\r\n        ? citiesList.find(city => city.name === this.state.searched)\r\n        : null;\r\n    this.props.closeDetailedInfo();\r\n    this.getSearchedWeatherInfo(search);\r\n  };\r\n\r\n  getSearchedWeatherInfo = async searchedCity => {\r\n    if (searchedCity === undefined) {\r\n      this.setState({ search: \"This city doesn't exist\" });\r\n      this.props.onSearch(null);\r\n      return;\r\n    } else if (searchedCity === null) return null;\r\n\r\n    const searchedCityInfo = await http.get(\r\n      `https://api.openweathermap.org/data/2.5/group?id=${searchedCity.id}&units=metric&APPID=97ea200bf11177ab3c207304b3be2608`\r\n    );\r\n    this.props.onSearch(searchedCityInfo.data.list[0]);\r\n  };\r\n\r\n  render() {\r\n    const { onSearchChange, onHandleSearch } = this;\r\n\r\n    return (\r\n      <form className=\"search-bar\">\r\n        <input\r\n          className=\"search-bar__input\"\r\n          type=\"text\"\r\n          onChange={onSearchChange}\r\n        />\r\n        <button className=\"search-bar__btn\" onClick={onHandleSearch}>\r\n          Search\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\r\nimport http from \"../../utils/httpService\";\r\nimport \"./UserCityWeather.scss\";\r\n\r\nclass UsersCityWeather extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      cityInfo: []\r\n    };\r\n  }\r\n\r\n  getUserWeather() {\r\n    navigator.geolocation.getCurrentPosition(\r\n      async pos => {\r\n        const userWeather = await this.getWeather(\r\n          pos.coords.latitude,\r\n          pos.coords.longitude\r\n        );\r\n        this.setState({ cityInfo: userWeather.data });\r\n      },\r\n      err => console.warn(`ERROR(${err.code}): ${err.message}`),\r\n      { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }\r\n    );\r\n  }\r\n\r\n  getWeather(latitude, longitude) {\r\n    return http.get(\r\n      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&APPID=97ea200bf11177ab3c207304b3be2608`\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getUserWeather();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"user-info\">\r\n        {this.state.cityInfo.length === 0 ? (\r\n          <h1>Loading</h1>\r\n        ) : (\r\n          <div>\r\n            <h2>City: {this.state.cityInfo.name}</h2>\r\n            <p>Country: {this.state.cityInfo.sys.country}</p>\r\n            <h3>Temperature: {Math.round(this.state.cityInfo.main.temp)}°C</h3>\r\n            <p>Humidity: {this.state.cityInfo.main.humidity}</p>\r\n            <button\r\n              className=\"user-info__button\"\r\n              onClick={() => this.props.showComponent(this.state.cityInfo.id)}\r\n            >\r\n              Details\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UsersCityWeather;\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nconst Pagination = ({ itemsCount, pageSize, currentPage, onPageChange }) => {\r\n  const pagesCount = Math.ceil(itemsCount / pageSize);\r\n\r\n  if (pagesCount === 1) return null;\r\n  const pages = _.range(1, pagesCount + 1);\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination\">\r\n        {pages.map(page => (\r\n          <li\r\n            key={page}\r\n            className={page === currentPage ? \"page-item active\" : \"page-item\"}\r\n          >\r\n            <a className=\"page-link\" onClick={() => onPageChange(page)}>\r\n              {page}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport \"../styles/bootstrap-4.3.1-dist/css/bootstrap.css\";\r\nimport \"./DetailedInfo.scss\";\r\nimport Pagination from \"../../utils/pagination\";\r\n\r\nconst DetailedInfoBody = ({\r\n  data,\r\n  photo,\r\n  showComponent,\r\n  handlePageChange,\r\n  currentPage\r\n}) => {\r\n  return (\r\n    <div>\r\n      {showComponent === true ? (\r\n        <div className=\"detailed-info\">\r\n          <h2>{data.city.name}</h2>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\" className=\"bg-primary\">\r\n                  Day\r\n                </th>\r\n                <th scope=\"col\" className=\"bg-primary\">\r\n                  Temp\r\n                </th>\r\n                <th scope=\"col\" className=\"bg-primary\">\r\n                  Max temp\r\n                </th>\r\n                <th scope=\"col\" className=\"bg-primary\">\r\n                  Min temp\r\n                </th>\r\n                <th scope=\"col\" className=\"bg-primary\">\r\n                  Huminity\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data.info.map(day => (\r\n                <tr key={day.dt_txt} className=\"table-info\">\r\n                  <th scope=\"row\">\r\n                    {day.dt_txt\r\n                      .slice(5, 16)\r\n                      .replace(/(\\w+)\\.(\\w+)/, \"$1\", \"$2\")\r\n                      .replace(\"-\", \".\")}\r\n                  </th>\r\n                  <th>{Math.round(day.main.temp)}°C</th>\r\n                  <th>{Math.round(day.main.temp_max)}°C</th>\r\n                  <th>{Math.round(day.main.temp_min)}°C</th>\r\n                  <th>{day.main.humidity}</th>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <Pagination\r\n            className=\"pagination\"\r\n            itemsCount={data.list.length}\r\n            pageSize={7}\r\n            currentPage={currentPage}\r\n            onPageChange={handlePageChange}\r\n          />\r\n          <img className=\"picture\" src={photo.urls.small} alt=\"\" />\r\n        </div>\r\n      ) : (\r\n        <div className=\"loading\">\r\n          <h2>Still loading</h2>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailedInfoBody;\r\n","import React, { Component } from \"react\";\r\nimport http from \"../../utils/httpService\";\r\nimport DetailedInfoBody from \"./DetailedInfoBody\";\r\nimport { paginate } from \"../../utils/paginate\";\r\n\r\nclass DetailedInfo extends Component {\r\n  state = {\r\n    data: {},\r\n    showComponent: false,\r\n    image: {},\r\n    currentPage: 1\r\n  };\r\n\r\n  getDetailedInfo = id => {\r\n    return http.get(\r\n      `https://api.openweathermap.org/data/2.5/forecast?id=${id}&units=metric&APPID=97ea200bf11177ab3c207304b3be2608`\r\n    );\r\n  };\r\n\r\n  getPhoto = name => {\r\n    return http.get(\r\n      `https://api.unsplash.com/search/photos?page=1-10&query=${name},town&client_id=1daed900b99463debb658164eea9672dc7f95f9939b97a745a479ddbe5592be8`\r\n    );\r\n  };\r\n\r\n  handlePageChange = page => {\r\n    this.setState({ currentPage: page });\r\n  };\r\n\r\n  async componentDidMount() {\r\n    console.log(this.state)\r\n    let idToSearch = this.props.city;\r\n    const detailedInfo = await this.getDetailedInfo(idToSearch);\r\n\r\n  this.setState({data: detailedInfo.data})\r\n\r\n    const photo = await this.getPhoto(this.state.data.city.name);\r\n\r\n    this.setState({\r\n      // data: detailedInfo.data,\r\n      image: photo.data.results[Math.floor(Math.random() * (10 - 0) + 0)],\r\n      showComponent: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { image, data, showComponent, currentPage } = this.state;\r\n\r\n    const info = paginate(data.list, currentPage, 7);\r\n\r\n    const paginatedData = { ...data, info };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <DetailedInfoBody\r\n          photo={image}\r\n          data={paginatedData}\r\n          showComponent={showComponent}\r\n          handlePageChange={this.handlePageChange}\r\n          currentPage={currentPage}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DetailedInfo;\r\n","import _ from \"lodash\";\r\n\r\nexport function paginate(items, pageNumber, pageSize) {\r\n  const startIndex = (pageNumber - 1) * pageSize;\r\n  return _(items)\r\n    .slice(startIndex)\r\n    .take(pageSize)\r\n    .value();\r\n}\r\n","import React from \"react\";\r\nimport CityCard from \"../CityCard/CityCard\";\r\nimport Search from \"../Search/Search\";\r\nimport UsersCityWeather from \"../UsersCityWeather/UsersCityWeather\";\r\nimport DetailedInfo from \"../DetailedInfo/DetailedInfo\";\r\nimport \"./PageContent.scss\";\r\n\r\nconst PageContentRender = ({\r\n  onMainBtnClick,\r\n  closeDetailedInfo,\r\n  onSearch,\r\n  _onButtonClick,\r\n  changeButtonColor,\r\n  handleLike,\r\n  isGeolocationEnabled,\r\n  showComponent,\r\n  searchedCity,\r\n  showPage,\r\n  data\r\n}) => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <nav className=\"top-nav\">\r\n        <button className=\"top-nav__home-button\" onClick={onMainBtnClick}>\r\n          Main page\r\n        </button>\r\n        <div className=\"top-nav__search-bar\">\r\n          <Search\r\n            closeDetailedInfo={closeDetailedInfo}\r\n            onSearch={onSearch}\r\n          ></Search>\r\n        </div>\r\n      </nav>\r\n\r\n      {!showComponent ? (\r\n        <div className=\"main-content-wrapper\">\r\n          {isGeolocationEnabled ? null : (\r\n            <div>\r\n              <UsersCityWeather\r\n                showComponent={_onButtonClick}\r\n              ></UsersCityWeather>\r\n            </div>\r\n          )}\r\n          <div className=\"main-content\">\r\n            {searchedCity !== null ? (\r\n              searchedCity.length !== 0 ? (\r\n                <CityCard\r\n                  changeButtonColor={changeButtonColor}\r\n                  key={searchedCity.id}\r\n                  cityInfo={searchedCity}\r\n                  handleLike={handleLike}\r\n                  showComponent={_onButtonClick}\r\n                ></CityCard>\r\n              ) : (\r\n                data.map(city => (\r\n                  <CityCard\r\n                    changeButtonColor={changeButtonColor}\r\n                    key={city.id}\r\n                    cityInfo={city}\r\n                    handleLike={handleLike}\r\n                    showComponent={_onButtonClick}\r\n                  ></CityCard>\r\n                ))\r\n              )\r\n            ) : (\r\n              <h1>No such city or misspelled name</h1>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <button className=\"detailed-info__button\" onClick={closeDetailedInfo}>\r\n            Close detailed info\r\n          </button>\r\n          <DetailedInfo city={showPage}></DetailedInfo>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageContentRender;\r\n","import React, { Component } from \"react\";\r\nimport http from \"../../utils/httpService\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport PageContentRender from \"./PageContentRender\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nclass PageContent extends Component {\r\n  state = {\r\n    data: [],\r\n    searchedCity: [],\r\n    showPage: \"\"\r\n  };\r\n\r\n  getCitiesFromLS() {\r\n    if (!localStorage.getItem(\"Cities\")) {\r\n      return [\r\n        { id: \"7532072\" },\r\n        { id: \"7533415\" },\r\n        { id: \"6695624\" },\r\n        { id: \"7530738\" },\r\n        { id: \"773357\" },\r\n        { id: \"7530729\" },\r\n        { id: \"7531906\" },\r\n        { id: \"3081046\" },\r\n        { id: \"7530984\" },\r\n        { id: \"7531734\" }\r\n      ];\r\n    } else return JSON.parse(localStorage.getItem(\"Cities\"));\r\n  }\r\n\r\n  handleLike = incomeCityId => {\r\n    let _cities = [...this.state.data];\r\n    const clickedCity = this.state.data.find(city => city.id === incomeCityId);\r\n    const index = _cities.indexOf(clickedCity);\r\n    if (clickedCity !== undefined) {\r\n      _cities.splice(index, 1);\r\n      toast.warn(\"Deleted this city from main page\");\r\n    } else {\r\n      _cities.push(this.state.searchedCity);\r\n      toast.success(\"Added this city on main page\");\r\n    }\r\n    this.setState({ data: _cities });\r\n    localStorage.setItem(\"Cities\", JSON.stringify(_cities));\r\n  };\r\n\r\n  changeButtonColor = incomeCityId => {\r\n    const clickedCity = this.state.data.find(city => city.id === incomeCityId);\r\n    return clickedCity !== undefined ? true : false;\r\n  };\r\n\r\n  getWeatherInfo = citiesList => {\r\n    if (!citiesList) return null;\r\n\r\n    let ids = citiesList.map(city => city.id);\r\n    ids = ids.join(\",\");\r\n\r\n    return http.get(\r\n      `https://api.openweathermap.org/data/2.5/group?id=${ids}&units=metric&APPID=97ea200bf11177ab3c207304b3be2608`\r\n    );\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const baseCitiesList = this.getCitiesFromLS();\r\n    const weather = await this.getWeatherInfo(baseCitiesList);\r\n    this.setState({ data: weather.data.list, cities: baseCitiesList });\r\n  }\r\n\r\n  onSearch = searchedCity => {\r\n    this.setState({ searchedCity });\r\n  };\r\n\r\n  _onButtonClick = id => {\r\n    const showComponent = !this.state.showComponent;\r\n    this.setState({\r\n      showComponent\r\n    });\r\n    this.setState({ showPage: id });\r\n  };\r\n\r\n  closeDetailedInfo = () => {\r\n    this.setState({ showComponent: false }, this.setState({ showPage: \"\" }));\r\n  };\r\n\r\n  onMainBtnClick = () => {\r\n    this.closeDetailedInfo();\r\n    this.setState({ searchedCity: [] });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <ToastContainer />\r\n\r\n        <PageContentRender\r\n          {...this}\r\n          {...this.props}\r\n          {...this.state}\r\n        ></PageContentRender>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PageContent;\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport PageContent from \"./components/PageContent/PageContent\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <PageContent />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}