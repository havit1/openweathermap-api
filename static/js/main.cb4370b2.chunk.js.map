{"version":3,"sources":["utils/httpService.js","components/like/like.jsx","components/CityCard/CityCard.jsx","components/Search/Search.jsx","components/UsersCityWeather/UsersCityWeather.jsx","utils/pagination.jsx","components/DetailedInfo/DetailedInfoBody.jsx","components/DetailedInfo/DetailedInfo.jsx","utils/paginate.js","components/PageContent/PageContentRender.jsx","components/PageContent/PageContent.jsx","App.jsx","serviceWorker.js","index.js"],"names":["axios","interceptors","response","use","error","status","console","log","toast","Promise","reject","get","post","put","delete","Like","props","classes","onMainPage","cityId","onClick","handleLike","className","aria-hidden","CityCard","cityInfo","changeButtonColor","showComponent","id","name","sys","country","alt","src","weather","icon","Math","round","main","temp","humidity","Search","state","searchedLine","searchedCityWeather","onSearchChange","e","setState","target","value","onHandleSearch","preventDefault","search","length","citiesList","find","city","closeDetailedInfo","getSearchedWeatherInfo","searchedCity","a","undefined","getSearchedCityWeather","http","searchedCityInfo","data","list","this","type","onChange","Component","UsersCityWeather","getDayName","dateString","split","join","Date","getDay","getWeatherForFutureDays","weatherListArray","weatherForNextDays","weatherListTest","i","weatherListNextDay","filter","day","dt_txt","push","splice","indexOf","getMinMaxTemp","tempList","minMaxWeatherForEachDay","map","maxTemp","temp_max","minTemp","temp_min","date","time","navigator","geolocation","getCurrentPosition","pos","getWeather","coords","latitude","longitude","userWeather","err","warn","code","message","enableHighAccuracy","timeout","maximumAge","weatherInfo","getUserWeather","wind","speed","item","key","Pagination","itemsCount","pageSize","currentPage","onPageChange","pagesCount","ceil","pages","_","range","page","DetailedInfoBody","photo","handlePageChange","sortedData","info","dt","slice","replace","urls","small","DetailedInfo","getDetailedInfo","getPhoto","getWeatherForEachDay","image","idToSearch","detailedInfo","results","paginatedData","items","pageNumber","startIndex","take","paginate","PageContentRender","onMainBtnClick","_onButtonClick","showPage","showUserLocationWindow","onCloseUserLocationWindow","geolocationEnabled","Fragment","PageContent","incomeCityId","_cities","clickedCity","index","success","localStorage","setItem","JSON","stringify","getWeatherInfo","idsToSearch","getItem","parse","baseCitiesList","getCitiesFromLS","cities","permissions","query","then","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb4370b2.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\naxios.interceptors.response.use(null, error => {\r\n  const expectedError =\r\n    error.response &&\r\n    error.response.status >= 400 &&\r\n    error.response.status < 500;\r\n\r\n  if (!expectedError) {\r\n    console.log(\"Logging the error\", error);\r\n    toast.error(\"An unexpected error occurred\");\r\n  }\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport default {\r\n  get: axios.get,\r\n  post: axios.post,\r\n  put: axios.put,\r\n  delete: axios.delete\r\n};\r\n","import React from \"react\";\r\nimport \"./like.scss\";\r\n\r\nconst Like = props => {\r\n  let classes = \"like-button\";\r\n  if (props.onMainPage(props.cityId)) classes += \"_submitted\";\r\n\r\n  return (\r\n    <button\r\n      onClick={() => props.handleLike(props.cityId)}\r\n      className={classes}\r\n      aria-hidden=\"true\"\r\n    >\r\n      {classes === \"like-button_submitted\" ? \"X\" : \"✓\"}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Like;\r\n","import React from \"react\";\r\nimport \"./CityCard.scss\";\r\nimport Like from \"../like/like\";\r\n\r\nfunction CityCard({ cityInfo, changeButtonColor, handleLike, showComponent }) {\r\n  return (\r\n    <div>\r\n      <div className=\"city-card\">\r\n        <Like\r\n          cityId={cityInfo.id}\r\n          onMainPage={changeButtonColor}\r\n          handleLike={handleLike}\r\n        ></Like>\r\n        <div onClick={() => showComponent(cityInfo.id)}>\r\n          <h2>\r\n            {cityInfo.name}, {cityInfo.sys.country}\r\n          </h2>\r\n          <img\r\n            alt=\"/\"\r\n            src={`http://openweathermap.org/img/wn/${cityInfo.weather[0].icon}@2x.png`}\r\n          ></img>\r\n          <h3>{Math.round(cityInfo.main.temp)}°C</h3>\r\n          <p>Humidity: {cityInfo.main.humidity}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CityCard;\r\n","import React, { Component } from \"react\";\r\nimport citiesList from \"../../utils/city.list.json\";\r\nimport http from \"../../utils/httpService\";\r\nimport \"./Search.scss\";\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    searchedLine: \"\",\r\n    searchedCityWeather: {}\r\n  };\r\n\r\n  onSearchChange = e => {\r\n    this.setState({ searchedLine: e.target.value });\r\n  };\r\n\r\n  onHandleSearch = e => {\r\n    e.preventDefault();\r\n    const search =\r\n      this.state.searchedLine.length > 0\r\n        ? citiesList.find(city => city.name === this.state.searchedLine)\r\n        : null;\r\n    this.props.closeDetailedInfo();\r\n    this.getSearchedWeatherInfo(search);\r\n  };\r\n\r\n  getSearchedWeatherInfo = async searchedCity => {\r\n    if (searchedCity === undefined) {\r\n      this.props.getSearchedCityWeather(null);\r\n      return;\r\n    } else if (searchedCity === null) return null;\r\n\r\n    const searchedCityInfo = await http.get(\r\n      `https://api.openweathermap.org/data/2.5/group?id=${searchedCity.id}&units=metric&APPID=97ea200bf11177ab3c207304b3be2608`\r\n    );\r\n    this.props.getSearchedCityWeather(searchedCityInfo.data.list[0]);\r\n  };\r\n\r\n  render() {\r\n    const { onSearchChange, onHandleSearch } = this;\r\n\r\n    return (\r\n      <form className=\"search-bar\">\r\n        <input\r\n          className=\"search-bar__input\"\r\n          type=\"text\"\r\n          onChange={onSearchChange}\r\n        />\r\n        <button className=\"search-bar__btn\" onClick={onHandleSearch}>\r\n          Find\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\r\nimport http from \"../../utils/httpService\";\r\nimport \"./UserCityWeather.scss\";\r\n\r\nclass UsersCityWeather extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      cityInfo: []\r\n    };\r\n  }\r\n\r\n  getUserWeather() {\r\n    navigator.geolocation.getCurrentPosition(\r\n      async pos => {\r\n        const userWeather = await this.getWeather(\r\n          pos.coords.latitude,\r\n          pos.coords.longitude\r\n        );\r\n        this.setState({ cityInfo: userWeather });\r\n      },\r\n      err => console.warn(`ERROR(${err.code}): ${err.message}`),\r\n      { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }\r\n    );\r\n  }\r\n\r\n  getWeather(latitude, longitude) {\r\n    return http.get(\r\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=metric&APPID=97ea200bf11177ab3c207304b3be2608`\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.weatherInfo) return;\r\n    this.getUserWeather();\r\n  }\r\n\r\n  getDayName = dateString => {\r\n    dateString.split(\" \").join(\"T\");\r\n    const days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\"\r\n    ];\r\n    const d = new Date(dateString);\r\n    const dayName = days[d.getDay()];\r\n    return dayName;\r\n  };\r\n\r\n  getWeatherForFutureDays = weatherListArray => {\r\n    const weatherForNextDays = [];\r\n    const weatherListTest = [...weatherListArray];\r\n\r\n    for (let i = 0; i < weatherListTest.length; i++) {\r\n      const weatherListNextDay = weatherListTest.filter(\r\n        day =>\r\n          new Date(weatherListTest[0].dt_txt.split(\" \").join(\"T\")).getDay() ===\r\n          new Date(day.dt_txt.split(\" \").join(\"T\")).getDay()\r\n      );\r\n\r\n      weatherForNextDays.push(weatherListNextDay);\r\n\r\n      weatherListTest.splice(\r\n        weatherListTest.indexOf(weatherListNextDay[0]),\r\n        weatherListTest.indexOf(\r\n          weatherListNextDay[weatherListNextDay.length - 1]\r\n        ) + 1\r\n      );\r\n    }\r\n    weatherForNextDays.splice(0, 1);\r\n\r\n    const minMaxTemp = this.getMinMaxTemp(weatherForNextDays);\r\n\r\n    return minMaxTemp;\r\n  };\r\n\r\n  getMinMaxTemp = tempList => {\r\n    const minMaxWeatherForEachDay = [];\r\n\r\n    tempList.map(day => {\r\n      let maxTemp = day[0].main.temp_max,\r\n        minTemp = day[0].main.temp_min,\r\n        date = day[0].dt_txt,\r\n        icon = day[0].weather[0].icon;\r\n      day.map(time => {\r\n        if (time.main.temp_max > maxTemp)\r\n          maxTemp = Math.round(time.main.temp_max);\r\n        if (time.main.temp_min < minTemp)\r\n          minTemp = Math.round(time.main.temp_min);\r\n      });\r\n      minMaxWeatherForEachDay.push({ minTemp, maxTemp, date, icon });\r\n    });\r\n    return minMaxWeatherForEachDay;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"user-info\">\r\n        {this.state.cityInfo.length === 0 ? (\r\n          <div className=\"lds-ripple\">\r\n            <div></div>\r\n            <div></div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"user-info__wrapper\">\r\n            <div className=\"user-info__today\">\r\n              <h3 className=\"user-info__today-header\">\r\n                {this.getDayName(this.state.cityInfo.data.list[0].dt_txt)}\r\n              </h3>\r\n              <h4>\r\n                {this.state.cityInfo.data.city.name},{\" \"}\r\n                {this.state.cityInfo.data.city.country}\r\n              </h4>\r\n              <div className=\"user-info__today-temp-icon\">\r\n                <h1>\r\n                  {Math.round(this.state.cityInfo.data.list[0].main.temp)}°C\r\n                </h1>\r\n                <img\r\n                  alt=\"/\"\r\n                  src={`http://openweathermap.org/img/wn/${this.state.cityInfo.data.list[0].weather[0].icon}@2x.png`}\r\n                ></img>\r\n              </div>\r\n              <div className=\"user-info__today-additional\">\r\n                <span>\r\n                  Humidity: {this.state.cityInfo.data.list[0].main.humidity}\r\n                </span>\r\n                <span>Wind: {this.state.cityInfo.data.list[0].wind.speed}</span>\r\n              </div>\r\n              {/* <button\r\n                  className=\"user-info__today-button\"\r\n                  onClick={() =>\r\n                    this.props.showComponent(this.state.cityInfo.data.city.id)\r\n                  }\r\n                >\r\n                  Details\r\n                </button> */}\r\n            </div>\r\n            <div className=\"user-info__nextdays\">\r\n              {this.getWeatherForFutureDays(this.state.cityInfo.data.list).map(\r\n                item => (\r\n                  <div className=\"user-info__nextdays-nextday\" key={item.date}>\r\n                    <h3 className=\"user-info__nextdays-nextday-header\">\r\n                      {this.getDayName(item.date)}\r\n                    </h3>\r\n                    <img\r\n                      alt=\"/\"\r\n                      src={`http://openweathermap.org/img/wn/${item.icon}@2x.png`}\r\n                    ></img>\r\n                    <div className=\"user-info__nextdays-nextday-temperature\">\r\n                      <div>{item.maxTemp}°C</div>\r\n                      <div>{item.minTemp}°</div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UsersCityWeather;\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nconst Pagination = ({ itemsCount, pageSize, currentPage, onPageChange }) => {\r\n  const pagesCount = Math.ceil(itemsCount / pageSize);\r\n\r\n  if (pagesCount === 1) return null;\r\n  const pages = _.range(1, pagesCount + 1);\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination\">\r\n        {pages.map(page => (\r\n          <li\r\n            key={page}\r\n            className={page === currentPage ? \"page-item active\" : \"page-item\"}\r\n            onClick={() => onPageChange(page)}\r\n          >\r\n            <a className=\"page-link\">{page}</a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport \"./DetailedInfo.scss\";\r\nimport Pagination from \"../../utils/pagination\";\r\n\r\nconst DetailedInfoBody = ({\r\n  data,\r\n  photo,\r\n  showComponent,\r\n  handlePageChange,\r\n  currentPage,\r\n  sortedData,\r\n  getDayName\r\n}) => {\r\n  return (\r\n    <div>\r\n      {showComponent === true ? (\r\n        <div className=\"detailed-info\">\r\n          {data.info.map(day => (\r\n            <div key={day[0].dt} className=\"detailed-info__body\">\r\n              <h2 className=\"detailed-info__day-name\">\r\n                {getDayName(day[0].dt_txt)}\r\n              </h2>\r\n              {day.map(time => (\r\n                <div className=\"detailed-info__weather-card\" key={time.dt_txt}>\r\n                  <h2 className=\"detailed-info__weather-card-time\">\r\n                    {time.dt_txt\r\n                      .slice(12, 16)\r\n                      .replace(/(\\w+)\\.(\\w+)/, \"$1\", \"$2\")\r\n                      .replace(\"-\", \".\")}\r\n                  </h2>\r\n                  <div className=\"detailed-info__weather-card-temp-img\">\r\n                    <div>{Math.round(time.main.temp)}°C</div>\r\n                    <img\r\n                      alt=\"/\"\r\n                      src={`http://openweathermap.org/img/wn/${time.weather[0].icon}@2x.png`}\r\n                    ></img>\r\n                  </div>\r\n                  <div className=\"detailed-info__weather-card-additional\">\r\n                    <span>Humidity: {time.main.humidity}</span>\r\n                    <span>Wind: {time.wind.speed}</span>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n          <Pagination\r\n            className=\"pagination\"\r\n            itemsCount={sortedData.length}\r\n            pageSize={1}\r\n            currentPage={currentPage}\r\n            onPageChange={handlePageChange}\r\n          />\r\n          <h1 className=\"awesome-photos\">Awesome photos</h1>\r\n          <div className=\"awesome-photos__wrapper\">\r\n            {photo.map(photo => (\r\n              <div className=\"awesome-photos__wrapper-photo\">\r\n                <img src={photo.urls.small} alt=\"\" />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"loading\">\r\n          <h2>Still loading</h2>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailedInfoBody;\r\n","import React, { Component } from \"react\";\r\nimport http from \"../../utils/httpService\";\r\nimport DetailedInfoBody from \"./DetailedInfoBody\";\r\nimport { paginate } from \"../../utils/paginate\";\r\n\r\nclass DetailedInfo extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data: {},\r\n      showComponent: false,\r\n      image: {},\r\n      currentPage: 1,\r\n      sortedData: []\r\n    };\r\n  }\r\n\r\n  getDetailedInfo = id => {\r\n    return http.get(\r\n      `https://api.openweathermap.org/data/2.5/forecast?id=${id}&units=metric&APPID=97ea200bf11177ab3c207304b3be2608`\r\n    );\r\n  };\r\n\r\n  getPhoto = name => {\r\n    return http.get(\r\n      `https://api.unsplash.com/search/photos?count=10&query=${name},town&client_id=1daed900b99463debb658164eea9672dc7f95f9939b97a745a479ddbe5592be8`\r\n    );\r\n  };\r\n\r\n  handlePageChange = page => {\r\n    this.setState({ currentPage: page });\r\n  };\r\n\r\n  async componentDidMount() {\r\n    let idToSearch = this.props.city;\r\n    const detailedInfo = await this.getDetailedInfo(idToSearch);\r\n\r\n    this.setState({ data: detailedInfo.data });\r\n\r\n    const sortedData = this.getWeatherForEachDay(detailedInfo.data.list);\r\n\r\n    this.setState({ sortedData });\r\n\r\n    const photo = await this.getPhoto(this.state.data.city.name);\r\n\r\n    console.log(photo);\r\n\r\n    this.setState({\r\n      image: photo.data.results,\r\n      showComponent: true\r\n    });\r\n  }\r\n\r\n  getDayName = dateString => {\r\n    dateString.split(\" \").join(\"T\");\r\n    const days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\"\r\n    ];\r\n    const d = new Date(dateString);\r\n    const dayName = days[d.getDay()];\r\n    return dayName;\r\n  };\r\n\r\n  getWeatherForEachDay = weatherListArray => {\r\n    const weatherForNextDays = [];\r\n    const weatherListTest = [...weatherListArray];\r\n\r\n    for (let i = 0; i < weatherListTest.length; i++) {\r\n      const weatherListNextDay = weatherListTest.filter(\r\n        day =>\r\n          new Date(weatherListTest[0].dt_txt.split(\" \").join(\"T\")).getDay() ===\r\n          new Date(day.dt_txt.split(\" \").join(\"T\")).getDay()\r\n      );\r\n\r\n      weatherForNextDays.push(weatherListNextDay);\r\n\r\n      weatherListTest.splice(\r\n        weatherListTest.indexOf(weatherListNextDay[0]),\r\n        weatherListTest.indexOf(\r\n          weatherListNextDay[weatherListNextDay.length - 1]\r\n        ) + 1\r\n      );\r\n    }\r\n\r\n    console.log(weatherForNextDays);\r\n\r\n    return weatherForNextDays;\r\n  };\r\n\r\n  render() {\r\n    const { image, showComponent, currentPage, sortedData } = this.state;\r\n\r\n    const info = paginate(sortedData, currentPage, 1);\r\n\r\n    const paginatedData = { ...sortedData, info };\r\n\r\n    return (\r\n      <DetailedInfoBody\r\n        getDayName={this.getDayName}\r\n        sortedData={sortedData}\r\n        photo={image}\r\n        data={paginatedData}\r\n        showComponent={showComponent}\r\n        handlePageChange={this.handlePageChange}\r\n        currentPage={currentPage}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default DetailedInfo;\r\n","import _ from \"lodash\";\r\n\r\nexport function paginate(items, pageNumber, pageSize) {\r\n  const startIndex = (pageNumber - 1) * pageSize;\r\n  return _(items)\r\n    .slice(startIndex)\r\n    .take(pageSize)\r\n    .value();\r\n}\r\n","import React from \"react\";\r\nimport CityCard from \"../CityCard/CityCard\";\r\nimport Search from \"../Search/Search\";\r\nimport UsersCityWeather from \"../UsersCityWeather/UsersCityWeather\";\r\nimport DetailedInfo from \"../DetailedInfo/DetailedInfo\";\r\nimport \"./PageContent.scss\";\r\n\r\nconst PageContentRender = ({\r\n  onMainBtnClick,\r\n  closeDetailedInfo,\r\n  _onButtonClick,\r\n  changeButtonColor,\r\n  handleLike,\r\n  showComponent,\r\n  showPage,\r\n  data,\r\n  showUserLocationWindow,\r\n  onCloseUserLocationWindow,\r\n  geolocationEnabled,\r\n  getSearchedCityWeather,\r\n  searchedCityInfo\r\n}) => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"wrapper\">\r\n        <header className=\"header\">\r\n          <button className=\"header__home-button\" onClick={onMainBtnClick}>\r\n            Home\r\n          </button>\r\n          <Search\r\n            closeDetailedInfo={closeDetailedInfo}\r\n            getSearchedCityWeather={getSearchedCityWeather}\r\n          ></Search>\r\n        </header>\r\n        {!showComponent ? (\r\n          <main className=\"main-content-wrapper\">\r\n            {geolocationEnabled === \"granted\" ? (\r\n              <div>\r\n                {showUserLocationWindow ? (\r\n                  <UsersCityWeather\r\n                    showComponent={_onButtonClick}\r\n                  ></UsersCityWeather>\r\n                ) : null}\r\n                <div\r\n                  className=\"main-content__show-info-button\"\r\n                  onClick={onCloseUserLocationWindow}\r\n                >\r\n                  {showUserLocationWindow ? \"Hide\" : \"Show\"} weather in your\r\n                  location\r\n                </div>\r\n              </div>\r\n            ) : null}\r\n            <div className=\"main-content\">\r\n              {searchedCityInfo !== null ? (\r\n                searchedCityInfo.length !== 0 ? (\r\n                  <CityCard\r\n                    changeButtonColor={changeButtonColor}\r\n                    key={searchedCityInfo.id}\r\n                    cityInfo={searchedCityInfo}\r\n                    handleLike={handleLike}\r\n                    showComponent={_onButtonClick}\r\n                  ></CityCard>\r\n                ) : (\r\n                  data.map(city => (\r\n                    <CityCard\r\n                      changeButtonColor={changeButtonColor}\r\n                      key={city.id}\r\n                      cityInfo={city}\r\n                      handleLike={handleLike}\r\n                      showComponent={_onButtonClick}\r\n                    ></CityCard>\r\n                  ))\r\n                )\r\n              ) : (\r\n                <h1>No such city or misspelled name</h1>\r\n              )}\r\n            </div>\r\n          </main>\r\n        ) : (\r\n          <React.Fragment>\r\n            <button\r\n              className=\"detailed-info__button\"\r\n              onClick={closeDetailedInfo}\r\n            >\r\n              ←\r\n            </button>\r\n            <DetailedInfo city={showPage}></DetailedInfo>\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PageContentRender;\r\n","import React, { Component } from \"react\";\r\nimport http from \"../../utils/httpService\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport PageContentRender from \"./PageContentRender\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nclass PageContent extends Component {\r\n  state = {\r\n    data: [],\r\n    searchedCityInfo: [],\r\n    searchedCity: \"\",\r\n    showPage: \"\",\r\n    showUserLocationWindow: true,\r\n    geolocationEnabled: false,\r\n    showComponent: false\r\n  };\r\n\r\n  getCitiesFromLS() {\r\n    //good\r\n    if (!localStorage.getItem(\"Cities\")) {\r\n      return [\r\n        { id: \"7532072\" },\r\n        { id: \"7533415\" },\r\n        { id: \"6695624\" },\r\n        { id: \"7530738\" },\r\n        { id: \"773357\" },\r\n        { id: \"7530729\" },\r\n        { id: \"7531906\" },\r\n        { id: \"3081046\" },\r\n        { id: \"7530984\" },\r\n        { id: \"7531734\" }\r\n      ];\r\n    } else return JSON.parse(localStorage.getItem(\"Cities\"));\r\n  }\r\n\r\n  handleLike = incomeCityId => {\r\n    let _cities = [...this.state.data];\r\n    const clickedCity = this.state.data.find(city => city.id === incomeCityId);\r\n    const index = _cities.indexOf(clickedCity);\r\n    if (clickedCity !== undefined) {\r\n      _cities.splice(index, 1);\r\n      toast.warn(\"Deleted this city from main page\");\r\n    } else {\r\n      _cities.push(this.state.searchedCityInfo);\r\n      toast.success(\"Added this city on main page\");\r\n    }\r\n    this.setState({ data: _cities });\r\n    localStorage.setItem(\"Cities\", JSON.stringify(_cities));\r\n  };\r\n\r\n  changeButtonColor = incomeCityId => {\r\n    const clickedCity = this.state.data.find(city => city.id === incomeCityId);\r\n    return clickedCity !== undefined ? true : false;\r\n  };\r\n\r\n  getWeatherInfo = citiesList => {\r\n    if (!citiesList) return null;\r\n\r\n    let idsToSearch = citiesList.map(city => city.id).join(\",\");\r\n\r\n    return http.get(\r\n      `https://api.openweathermap.org/data/2.5/group?id=${idsToSearch}&units=metric&APPID=97ea200bf11177ab3c207304b3be2608`\r\n    );\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const baseCitiesList = this.getCitiesFromLS();\r\n    const weatherInfo = await this.getWeatherInfo(baseCitiesList);\r\n    this.setState({ data: weatherInfo.data.list, cities: baseCitiesList });\r\n    navigator.permissions.query({ name: \"geolocation\" }).then(status => {\r\n      this.setState({ geolocationEnabled: status.state });\r\n    });\r\n  }\r\n\r\n  getSearchedCityWeather = searchedCityInfo => {\r\n    this.setState({ searchedCityInfo });\r\n  };\r\n\r\n  _onButtonClick = id => {\r\n    const showComponent = !this.state.showComponent;\r\n    this.setState({\r\n      showComponent\r\n    });\r\n    this.setState({ showPage: id });\r\n  };\r\n\r\n  closeDetailedInfo = () => {\r\n    this.setState({ showComponent: false }, this.setState({ showPage: \"\" }));\r\n  };\r\n\r\n  onMainBtnClick = () => {\r\n    this.closeDetailedInfo();\r\n    this.setState({ searchedCityInfo: [] });\r\n  };\r\n\r\n  onCloseUserLocationWindow = () => {\r\n    this.setState({\r\n      showUserLocationWindow: !this.state.showUserLocationWindow\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <ToastContainer />\r\n        <PageContentRender\r\n          {...this}\r\n          {...this.props}\r\n          {...this.state}\r\n        ></PageContentRender>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PageContent;\r\n","import React from \"react\";\r\nimport PageContent from \"./components/PageContent/PageContent\";\r\n\r\nfunction App() {\r\n  return <PageContent />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}